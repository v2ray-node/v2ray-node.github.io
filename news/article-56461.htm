<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://v2ray-node.github.io/news/article-56461.htm" />
    <title>vue项目实战精粹汇总</title>
        <meta name="description" content="1.1 vue生命周期以及不同生命周期下的应用  1.2 vue常用的指令以及动态指令的使用  1.3 vue常用修饰符及作用  1.4 组件之间，父子组件之间的通信方案  1.5 vue实现按需加载" />
        <link rel="icon" href="/assets/website/img/v2ray_node/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="V2ray Node免费节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://v2ray-node.github.io/news/article-56461.htm" />
    <meta property="og:site_name" content="V2ray Node免费节点官网" />
    <meta property="og:title" content="vue项目实战精粹汇总" />
    <meta property="og:image" content="https://v2ray-node.github.io/uploads/20240810/823330949e90bc030d363139bfc4db3d.webp" />
        <meta property="og:release_date" content="2025-02-14T10:02:38" />
    <meta property="og:updated_time" content="2025-02-14T10:02:38" />
        <meta property="og:description" content="1.1 vue生命周期以及不同生命周期下的应用  1.2 vue常用的指令以及动态指令的使用  1.3 vue常用修饰符及作用  1.4 组件之间，父子组件之间的通信方案  1.5 vue实现按需加载" />
        
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="vue项目实战精粹汇总">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,900" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/fonts/v2ray_node/icomoon/style.css">
    <link rel="stylesheet" href="/assets/website/css/v2ray_node/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/v2ray_node/jquery-ui.css">
    <link rel="stylesheet" href="/assets/website/css/v2ray_node/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/v2ray_node/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/css/v2ray_node/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/css/v2ray_node/jquery.fancybox.min.css">
    <link rel="stylesheet" href="/assets/website/fonts/v2ray_node/flaticon/font/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/v2ray_node/aos.css">
    <link rel="stylesheet" href="/assets/website/css/v2ray_node/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-7H6DT73WHK"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-7H6DT73WHK');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-spy="scroll" data-target=".site-navbar-target" data-offset="300" data-page="detail">
    <div class="site-wrap">
            
        <div class="site-mobile-menu site-navbar-target">
            <div class="site-mobile-menu-header">
                <div class="site-mobile-menu-close mt-3">
                    <span class="icon-close2 js-menu-toggle"></span>
                </div>
            </div>
            <div class="site-mobile-menu-body"></div>
        </div>
        <header class="site-navbar py-4 js-sticky-header site-navbar-target" role="banner">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-6 col-md-3">
                        <a href="/" class="h2 mb-0">
                                                <span class="mb-0 site-logo"><span>V2ray Node</span></span>
                                                </a>
                    </div>
                    <div class="col-12 col-md-9 d-none d-xl-block">
                        <nav class="site-navigation position-relative text-right" role="navigation">
                            <ul class="site-menu main-menu js-clone-nav mr-auto d-none d-lg-block">
                                                                <li><a href="/" class="nav-link">首页</a></li>
                                                                <li><a href="/free-nodes/" class="nav-link">免费节点</a></li>
                                                                <li><a href="/paid-subscribe/" class="nav-link">推荐机场</a></li>
                                                                <li><a href="/client.htm" class="nav-link">客户端</a></li>
                                                                <li><a href="/news/" class="nav-link">新闻资讯</a></li>
                                                            </ul>
                        </nav>
                    </div>
                    <div class="col-6 d-inline-block d-xl-none ml-md-0 py-3" style="position: relative; top: 3px;"><a href="#" class="site-menu-toggle js-menu-toggle text-black float-right"><span class="icon-menu h3"></span></a></div>
                </div>
            </div>
        </header>
        <div class="site-blocks-cover inner-page-cover overlay" style="background-image: url(/assets/website/img/v2ray_node/hero_1.jpg);" data-aos="fade" id="home-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-6 mt-lg-5 mr-auto text-left align-self-end align-self-md-center">
                        <h1>vue项目实战精粹汇总</h1>
                        <p><a href="/">首页</a> <span class="mx-3">&bullet;</span> <a href="/news/">新闻资讯</a> <span class="mx-3">&bullet;</span> 正文</p>
                    </div>
                </div>
            </div>
        </div>
        <section class="site-section" id="about-section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="V2rayNode节点分享站" data-url="https://v2raynode.github.io">
                  				  				  				  			 <div id="log-box">  				<div id="catalog"><ul id="catalog-ul"> <li><i class="be be-arrowright"></i> <a href="#title-0" title="1.1 vue生命周期以及不同生命周期下的应用">1.1 vue生命周期以及不同生命周期下的应用</a></li> <li><i class="be be-arrowright"></i> <a href="#title-1" title="1.2 vue常用的指令以及动态指令的使用">1.2 vue常用的指令以及动态指令的使用</a></li> <li><i class="be be-arrowright"></i> <a href="#title-2" title="1.3 vue常用修饰符及作用">1.3 vue常用修饰符及作用</a></li> <li><i class="be be-arrowright"></i> <a href="#title-3" title="1.4 组件之间，父子组件之间的通信方案">1.4 组件之间，父子组件之间的通信方案</a></li> <li><i class="be be-arrowright"></i> <a href="#title-4" title="1.5 vue实现按需加载组件">1.5 vue实现按需加载组件</a></li> <li><i class="be be-arrowright"></i> <a href="#title-5" title="1.8 vue中检测变化的注意事项">1.8 vue中检测变化的注意事项</a></li> <li><i class="be be-arrowright"></i> <a href="#title-6" title="1.9 对指定页面使用keep-alive路由缓存">1.9 对指定页面使用keep-alive路由缓存</a></li> <li><i class="be be-arrowright"></i> <a href="#title-7" title="1.10 vue常用工具函数总结">1.10 vue常用工具函数总结</a></li> <li><i class="be be-arrowright"></i> <a href="#title-8" title="1.11 如何基于axios二次封装一个具有请求/响应拦截的http请求">1.11 如何基于axios二次封装一个具有请求/响应拦截的http请求</a></li> <li><i class="be be-arrowright"></i> <a href="#title-9" title="1.12 vue常用社区组件，插件">1.12 vue常用社区组件，插件</a></li> </ul><span class="log-zd"><span class="log-close"><a title="隐藏目录"><i class="be be-cross"></i><strong>目录</strong></a></span></span></div>  			</div> <div id="content_views" class="htmledit_views"> <div id="js_content"> <p></p> <h2>前言</h2> <p>vue作为前端主流的3大框架之一，目前在国内有着非常广泛的应用，由于其轻量和自底向上的渐进式设计思想，使其不仅仅被应用于PC系统，对于移动端，桌面软件（electronjs）等也有广泛的应用，与此诞生的优秀的开源框架比如elementUI，iView， ant-design-vue等也极大的降低了开发者的开发成本，并极大的提高了开发效率。笔者最初接触vue时也是使用的iview框架，亲自体会之后确实非常易用且强大。</p> <p>笔者曾经有两年的vue项目经验，基于vue做过移动端项目和PC端的ERP系统，虽然平时工作中采用的是react技术栈，但平时还是会积累很多vue相关的最佳实践和做一些基于vue的开源项目，所以说总结vue的项目经验我觉得是最好的成长，也希望给今年想接触vue框架或者想从事vue工作的朋友带来一些经验和思考。</p> <p>你将收获</p> <h2></h2> <ul> <li> <p>vue框架使用注意事项和最佳经验</p> </li> <li> <p>vue项目配置经验总结</p> </li> <li> <p>vue组件设计经验总结</p> </li> <li> <p>vue项目架构与服务化探索</p> </li> </ul> <h2>正文</h2> <p>本文不仅仅是总结一些vue使用踩过的一些坑和项目经验，更多的是使用框架（vue/react）过程中的方法论和组件的设计思路，最后还会有一些个人对工程化的一些总结，希望有更多经验的朋友们可以一起交流，探索vue的奥妙。</p> <p>在开始文章之前，笔者建议大家对javascript, css, html基础有一定的了解，因为会用框架不一定能很好的实现业务需求和功能，要想实现不同场景下不同复杂度的需求，一定要对web基础有充足的了解，所以希望大家熟悉如下基础知识，如果不太熟悉可以花时间研究了解一下。</p> <p>javascript：</p> <ul> <li> <p>数组常用方法的使用，比如遍历有forEach，map，filter，every， some，reduce，操作方法有splice，slice， join，push，shift， pop，sort等</p> </li> <li> <p>基本数据结构，引用类型（对象，数组）</p> </li> <li> <p>基本逻辑运算if else， switch，三目运算：？，for/while循环等</p> </li> <li> <p>字符串常见api（如replace，slice， substr，indexOf）</p> </li> <li> <p>基本正则使用</p> </li> <li> <p>变量作用域，作用域链，变量提升，函数声明提升</p> </li> <li> <p>对象基本用法，面向对象编程</p> </li> </ul> <p>css：</p> <ul> <li> <p>基本盒模型（border/content/padding等）</p> </li> <li> <p>4种常用定位（static/absolute/relative/fixed）</p> </li> <li> <p>常用布局方式（浮动布局/弹性布局flex/自适应布局/网格布局grid）</p> </li> <li> <p>css3基本样式与动画（transition，animation）</p> </li> </ul> <p>html：</p> <ul> <li> <p>新标签基本用法和使用</p> </li> <li> <p>head标签作用与用法（主要是meta属性的用法）</p> </li> </ul> <p>所以希望大家掌握好以上基础知识，也是前端开发的基础，接下来我们直接进入正文。</p> <h3>1. vue框架使用注意事项和最佳经验</h3> <blockquote><p>   ❝</p> <p>vue学习最快的方式就是实践，根据官网多写几个例子是掌握vue最快的方式。 接下来笔者就来总结一下在开发vue项目中的一些实践经验。</p> <p>  ❞</p></blockquote> <span class="directory"></span><h4 id="title-0">1.1 vue生命周期以及不同生命周期下的应用</h4> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220608/38577bca0b15607cbee5e98439efe39f.jpg" alt="vue项目实战精粹汇总"></p> <p>以上是vue官网上的生命周期的方法，大致划分一下分为创建前/后，挂载前/后，更新前/后，销毁前/后这四个阶段。各个阶段的状态总结如下：</p> <ul> <li> <p>beforeCreate：在beforeCreate生命周期执行时，data和methods中的数据还未初始化，所以此时不能使用data中的数据和methods中的方法</p> </li> <li> <p>create：data 和 methods初始化完毕，此时可以使用methods 中的方法和data 中的数据</p> </li> <li> <p>beforeMount：template模版已经编译好，但还未挂载到页面，此时页面还是上一个状态</p> </li> <li> <p>mounted：此时Vue实例初始化完成了，DOM挂载完毕，可以直接操作dom或者使用第三方dom库</p> </li> <li> <p>beforeUpdate： 此时data已更新，但还未同步页面</p> </li> <li> <p>updated：data和页面都已经更新完成</p> </li> <li> <p>beforeDestory：Vue实例进入销毁阶段，但所有的 data 和 methods ， 指令， 过滤器等都处于可用状态</p> </li> <li> <p>destroyed： 此时组件已经被销毁，data，methods等都不可用</p> </li> </ul> <p>根据以上介绍，页面第一次加载时会执行 beforeCreate， created， beforeMount， mounted这四个生命周期，所以我们一般在created阶段处理http请求获取数据或者对data做一定的处理， 我们会在mounted阶段操作dom，比如使用jquery，或者其他第三方dom库。其次，根据以上不同周期下数据和页面状态的不同，我们还可以做其他更多操作，所以说每个生命周期的发展状态非常重要，一定要理解，这样才能对vue有更多的控制权。</p> <span class="directory"></span><h4 id="title-1">1.2 vue常用的指令以及动态指令的使用</h4> <p>指令 (Directives) 是带有 v- 前缀的特殊属性，vue常用的指令有：</p> <ul> <li> <p>v-bind 用于响应式地更新 HTML属性</p> </li> <li> <p>v-if 根据表达式的值的真假来决定是否插入/移除元素</p> </li> <li> <p>v-on 用于监听 DOM 事件</p> </li> <li> <p>v-show 用于决定是否展示该元素，底层通过display：none实现</p> </li> <li> <p>v-html 在dom内插入html内容</p> </li> <li> <p>v-for 循环</p> </li> <li> <p>v-text 渲染指定dom的内容文本</p> </li> <li> <p>v-cloak 和CSS规则如 [v-cloak] { display: none } 一起用，可以隐藏未编译的 Mustache 标签直到实例准备完毕</p> </li> </ul> <p>以上是比较常用的指令，具体用法就不一一举例了，其中v-cloak主要是用来避免页面加载时出现闪烁的问题，可以结合css的[v-cloak] { display: none }方式解决这一问题。关于指令的动态参数，使用也很简单，虽然是2.6.0 新增的，但是方法很灵活，具体使用如下：</p> <pre class="has"><code class="language-go">&lt;a v-on:[eventName]="doSomething"&gt; ... &lt;/a&gt;   复制代码</code></pre> <p>我们可以根据具体情况动态切换事件名，从而绑定同一个函数。</p> <span class="directory"></span><h4 id="title-2">1.3 vue常用修饰符及作用</h4> <ol> <li> <p style="text-align:left;">事件修饰符</p> </li> </ol> <ul> <li> <p>.stop 阻止事件冒泡</p> </li> <li> <p>.prevent 阻止事件默认行为</p> </li> <li> <p>.self 事件绑定的元素本身触发时才触发回调</p> </li> <li> <p>.once 事件只能触发一次，第二次就不会触发了</p> </li> <li> <p>.native 将一个vue组件变成一个普通的html，使其可以监听click等原生事件 具体使用如下：</p> </li> </ul> <pre class="has"><code class="language-go">&lt;Tag @click.native="handleClick"&gt;ok&lt;/Tag&gt;   复制代码</code></pre> <ol> <li> <p style="text-align:left;">表单修饰符</p> </li> </ol> <ul> <li> <p>.lazy 在输入框输入完内容，光标离开时才更新视图</p> </li> <li> <p>.trim 过滤首尾空格</p> </li> <li> <p>.number 如果先输入数字，那它就会限制你输入的只能是数字;如果先输入字符串，那就相当于没有加.number</p> </li> </ul> <p>用法如下：</p> <pre class="has"><code class="language-go">&lt;input type="text" v-model.trim="value"&gt;   复制代码</code></pre> <p>还有很多修饰符比如键盘，鼠标等修饰符，感兴趣的大家可以自行学习研究。</p> <span class="directory"></span><h4 id="title-3">1.4 组件之间，父子组件之间的通信方案</h4> <p>组件之间的通信方案：</p> <ul> <li> <p>通过事件总线（bus），即通过发布订阅的方式</p> </li> <li> <p>vuex</p> </li> </ul> <p>父子组件：</p> <ul> <li> <p>父组件通过prop向自组件传递数据</p> </li> <li> <p>子组件绑定自定义事件，通过this.$emit(event,params) 来调用自定义事件</p> </li> <li> <p>使用vue提供的 children &amp; $refs方法来通信</p> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220608/b79e4f31997b96f2e6810ff0a7a76fee.jpg" alt="vue项目实战精粹汇总"></p> <span class="directory"></span><h4 id="title-4">1.5 vue实现按需加载组件</h4> <p>组件的按需加载是项目性能优化的一个环节，也可以降低首屏渲染时间，笔者在项目中用到的组件按需加载的方式如下：</p> <ol> <li> <p style="text-align:left;">使用() =&gt; import()， 具体代码如下：</p> </li> </ol> <pre class="has"><code class="language-go">&lt;template&gt;       &lt;div&gt;          &lt;ComponentA /&gt;          &lt;ComponentB /&gt;       &lt;/div&gt;   &lt;/template&gt;   &lt;script&gt;   const ComponentA = () =&gt; import('./ComponentA')   const ComponentB = () =&gt; import('./ComponentB')   export default {       // ...       components: {       ComponentA,       ComponentB       },       // ...   }   &lt;/script&gt;   复制代码</code></pre> <ol> <li> <p style="text-align:left;">使用resolve =&gt; require(['./ComponentA'], resolve)，使用方法如下：</p> </li> </ol> <pre class="has"><code class="language-go">&lt;template&gt;       &lt;div&gt;          &lt;ComponentA /&gt;       &lt;/div&gt;   &lt;/template&gt;   &lt;script&gt;   const ComponentA = resolve =&gt; require(['./ComponentA'], resolve)   export default {       // ...       components: {       ComponentA       },       // ...   }   &lt;/script&gt;   复制代码</code></pre> <h4><strong>「1.6 vuex的几种属性和作用，以及使用vuex的基本模式」</strong></h4> <blockquote><p>   ❝</p> <p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p> <p>  ❞</p></blockquote> <p>vuex的基本工作模式如下图所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220608/9eaff479280256e5ec8950379b52cc93.jpg" alt="vue项目实战精粹汇总"></p> <p>state的改变完全由mutations控制， 我们也没必要任何项目都使用vuex，对于中大型复杂项目而言，需要共享的状态很多时，使用vuex才是最佳的选择。接下来我将详细介绍各api的概念和作用。</p> <ul> <li> <p>state 单一状态树，用一个对象就包含了全部的应用层级状态，并且作为一个唯一数据源而存在</p> </li> <li> <p>getters 就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算 比如如下案例：</p> </li> </ul> <pre class="has"><code class="language-go">const store = new Vuex.Store({     state: {       todos: [         { id: 1, text: '...', done: true },         { id: 2, text: '...', done: false }       ]     },     getters: {       doneTodos: state =&gt; {         return state.todos.filter(todo =&gt; todo.done)       }     }   })   // 访问getters里的属性   this.$store.getters.doneTodos   复制代码</code></pre> <ul> <li> <p style="text-align:left;">Mutation 更改 Vuex 的 store 中的状态的唯一方法，使用案例如下：</p> </li> </ul> <pre class="has"><code class="language-go">const store = new Vuex.Store({     state: {       num: 1     },     mutations: {       add (state) {         // 变更状态         state.num++       }     }   })      // 在项目中使用mutation   store.commit('add')   // 添加额外参数   store.commit('add', 10)   复制代码</code></pre> <ul> <li> <p style="text-align:left;">Action Action提交的是mutation，而不是直接变更状态，可以包含任意异步操作，具体用法如下：</p> </li> </ul> <pre class="has"><code class="language-go">const&nbsp;store&nbsp;=&nbsp;new&nbsp;Vuex.Store({&nbsp;&nbsp; &nbsp;&nbsp;state:&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;num:&nbsp;0&nbsp;&nbsp; &nbsp;&nbsp;},&nbsp;&nbsp; &nbsp;&nbsp;mutations:&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;add&nbsp;(state)&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.num++&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp; &nbsp;&nbsp;},&nbsp;&nbsp; &nbsp;&nbsp;actions:&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;add&nbsp;(context)&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.commit('add')&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;asyncAdd&nbsp;({&nbsp;commit&nbsp;})&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;setTimeout(()&nbsp;=&gt;&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;commit('add')&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp; &nbsp;&nbsp;}&nbsp;&nbsp; })&nbsp;&nbsp; //&nbsp;分发action&nbsp;&nbsp; store.dispatch('add')&nbsp;&nbsp; //&nbsp;异步action&nbsp;&nbsp; store.dispatch('asyncAdd')&nbsp;&nbsp; //&nbsp;异步传参&nbsp;&nbsp; store.dispatch('asyncAdd',&nbsp;{&nbsp;num:&nbsp;10&nbsp;})&nbsp;&nbsp; 复制代码</code></pre> <ul> <li> <p style="text-align:left;">Module 将store分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块</p> </li> </ul> <p>笔者更具实际经验总结了一套标准使用模式，就拿笔者之前的开源XPXMS举例，如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220608/bcd582a011565487db4e8dddfd8ff2dc.jpg" alt="vue项目实战精粹汇总"></p> <p>store目录是用来组织vuex代码用的，我将action，mutation，state分文件管理，这样项目大了之后也很容易管理和查询。接下来看看是如何组织的：</p> <pre class="has"><code class="language-go">// type.ts   // 用来定义state等的类型文件   export interface State {       name: string;       isLogin: boolean;       config: Config;       [propName: string]: any;  // 用来定义可选的额外属性   }      export interface Config {       header: HeaderType,       banner: Banner,       bannerSider: BannerSider,       supportPay: SupportPay   }      export interface Response {       [propName: string]: any;   }      // state.ts   // 定义全局状态   import { State } from './type'   export const state: State = {       name: '',       isLogin: false,       curScreen: '0', // 0为pc， 1为移动       config: {           header: {               columns: ['首页', '产品', '技术', '运营', '商业'],               height: '50',               backgroundColor: '#000000',               logo: ''           }       },       // ...       articleDetail: null   };      // mutation.ts   import {       State,       Config,       HeaderType,       Banner,       BannerSider,       SupportPay   } from './type'      export default {       // 预览模式       setScreen(state: State, payload: string) {           state.curScreen = payload;       },          // 删除banner图       delBanner(state: State, payload: number) {           state.config.banner.bannerList.splice(payload, 1);       },          // 添加banner图       addBanner(state: State, payload: object) {           state.config.banner.bannerList.push(payload);       },          // ...   };      // action.ts   import {       HeaderType,       Response    } from './type'   import http from '../utils/http'   import { uuid, formatTime } from '../utils/common'   import { message } from 'ant-design-vue'      export default {       /**配置 */       setConfig(context: any, paylod: HeaderType) {           http.get('/config/all').then((res:Response) =&gt; {               context.commit('setConfig', res.data)           }).catch((err:any) =&gt; {               message.error(err.data)           })       },       /**header */       saveHeader(context: any, paylod: HeaderType) {           http.post('/config/setHeader', paylod).then((res:Response) =&gt; {               message.success(res.data)               context.commit('saveHeader', paylod)           }).catch((err:any) =&gt; {               message.error(err.data)           })       },       // ...   };      // index.ts   import Vue from 'vue';   import Vuex from 'vuex';   import { state } from './state';   import mutations from './mutation';   import actions from './action';      Vue.use(Vuex);      export default new Vuex.Store({     state,     mutations,     actions   });      // main.ts   // 最后挂载到入口文件的vue实例上   import Vue from 'vue';   import App from './App.vue';   import router from './router';   import store from './store/';   import './component-class-hooks';   import './registerServiceWorker';      Vue.config.productionTip = false;      new Vue({     router,     store,     render: (h) =&gt; h(App),   }).$mount('#app');   复制代码</code></pre> <p>我们在实际项目中都可以使用这种方式组织管理vuex相关的代码。</p> <h4><strong>「1.7 vue-router基本使用模式和导航钩子的用法及作用」</strong></h4> <p>vue-router使用大家想必不是很陌生，这里直接写一个案例：</p> <pre class="has"><code class="language-go">// router.ts   import Vue from 'vue';   import Router from 'vue-router';   import Home from './views/admin/Home.vue';      Vue.use(Router);      const router =  new Router({     mode: 'history',     base: process.env.BASE_URL,     routes: [       {         path: '/',         component: Home,         beforeEnter: (to, from, next) =&gt; {           next();         },         children: [           {             // 当 /user/:id/profile 匹配成功，             // UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中             path: '',             name: 'header',             component: () =&gt; import(/* webpackChunkName: "header" */ './views/admin/subpage/Header.vue'),           },              {             path: '/banner',             name: 'banner',             component: () =&gt; import(/* webpackChunkName: "banner" */ './views/admin/subpage/Banner.vue'),           },           {             path: '/admin',             name: 'admin',             component: () =&gt; import(/* webpackChunkName: "admin" */ './views/admin/Admin.vue'),           },         ],       },       {         path: '/login',         name: 'login',         component: () =&gt; import(/* webpackChunkName: "login" */ './views/Login.vue'),         meta:{           keepAlive:false //不需要被缓存的组件         }       },       {         path: '*',         name: '404',         component: () =&gt; import(/* webpackChunkName: "404" */ './views/404.vue'),       },     ],   });      // 路由导航钩子的用法   router.beforeEach((to, from, next) =&gt; {     if(from.path.indexOf('/preview') &lt; 0) {       sessionStorage.setItem('prevToPreviewPath', from.path);     }     next();   })      export default router   复制代码</code></pre> <p>以上案例是很典型的静态路由配置和导航钩子的用法（如何加载路由组件，动态加载路由组件，404页面路由配置，路由导航钩子使用）。如果在做后台系统，往往会涉及到权限系统，所以一般会采用动态配置路由，通过前后端约定的路由方式，路由配置文件更具不同用户的权限由后端处理后返。由于设计细节比较繁琐，涉及到前后端协定，所以这里只讲思路就好了。</p> <span class="directory"></span><h4 id="title-5">1.8 vue中检测变化的注意事项</h4> <p>受现代 JavaScript 的限制，Vue 无法检测到对象属性的添加或删除。由于 Vue 会在初始化实例时对属性执行 getter/setter 转化，所以属性必须在 data 对象上存在才能让 Vue 将它转换为响应式的。还有一种情况是，vue无法检测到data属性值为数组或对象的修改，所以我们需要用原对象与要混合进去的对象的属性一起创建一个新的对象。可以使用this.$set或者对象的深拷贝，如果是数组则可以使用splice，扩展运算符等方法来更新。</p> <span class="directory"></span><h4 id="title-6">1.9 对指定页面使用keep-alive路由缓存</h4> <p>keep-alive是Vue的内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染DOM。我们可以使用以下方式设置某些页面是否被缓存：</p> <ol> <li> <p style="text-align:left;">通过路由配置文件和router-view设置：</p> </li> </ol> <pre class="has"><code class="language-go">// routes 配置   export default [     {       path: '/A',       name: 'A',       component: A,       meta: {         keepAlive: true // 需要被缓存       }     }, {       path: '/B',       name: 'B',       component: B,       meta: {         keepAlive: false // 不需要被缓存       }     }   ]   复制代码</code></pre> <p>路由视图配置：</p> <pre class="has"><code class="language-go">// 路由设置   &lt;keep-alive&gt;       &lt;router-view v-if="$route.meta.keepAlive"&gt;           &lt;!-- 会被缓存的视图组件--&gt;       &lt;/router-view&gt;   &lt;/keep-alive&gt;      &lt;router-view v-if="!$route.meta.keepAlive"&gt;       &lt;!-- 不需要缓存的视图组件--&gt;   &lt;/router-view&gt;    复制代码</code></pre> <ol> <li> <p style="text-align:left;">通过router-view的key属性 具体方式如下：</p> </li> </ol> <pre class="has"><code class="language-go">&lt;template&gt;     &lt;div id="app"&gt;       &lt;keep-alive&gt;         &lt;router-view :key="key" /&gt;       &lt;/keep-alive&gt;     &lt;/div&gt;   &lt;/template&gt;      &lt;script lang="ts"&gt;   import { Vue } from 'vue-property-decorator';   import Component from 'vue-class-component';   @Component   export default class App extends Vue {     get key() {       // 缓存除预览和登陆页面之外的其他页面       console.log(this.$route.path)       if(this.$route.path.indexOf('/preview') &gt; -1) {         return '0'       }else if(this.$route.path === '/login') {         return '1'       }else {         return '2'       }     }   }   &lt;/script&gt;   复制代码</code></pre> <span class="directory"></span><h4 id="title-7">1.10 vue常用工具函数总结</h4> <p>总结一下笔者在vue项目中的常用的工具函数。</p> <ul> <li> <p style="text-align:left;">识别ie浏览器</p> </li> </ul> <pre class="has"><code class="language-go">/**    * 识别ie--浅识别    */   export const isIe = () =&gt; {       let explorer = window.navigator.userAgent;           //判断是否为IE浏览器       if (explorer.indexOf("MSIE") &gt;= 0) {           return true;       }else {           return false       }   }   复制代码</code></pre> <ul> <li> <p style="text-align:left;">颜色16进制转rgba</p> </li> </ul> <pre class="has"><code class="language-go">/**    * 颜色转换16进制转rgba    * @param {String} hex    * @param {Number} opacity    */   export function hex2Rgba(hex, opacity) {   	if(!hex) hex = "#2c4dae";       return "rgba(" + parseInt("0x" + hex.slice(1, 3)) + "," + parseInt("0x" + hex.slice(3, 5)) + "," + parseInt("0x" + hex.slice(5, 7)) + "," + (opacity || "1") + ")";   }   复制代码</code></pre> <ul> <li> <p style="text-align:left;">去除html标签</p> </li> </ul> <pre class="has"><code class="language-go">// 去除html标签   export const htmlSafeStr = (str) =&gt; {       return str.replace(/&lt;[^&gt;]+&gt;/g, "")   }   复制代码</code></pre> <ul> <li> <p style="text-align:left;">获取url参数对象</p> </li> </ul> <pre class="has"><code class="language-go">/* 获取url参数 */   export const getQueryString = () =&gt; {       let qs = location.href.split('?')[1] || '',           args = {},           items = qs.length ? qs.split("&amp;") : [];           items.forEach((item,i) =&gt; {               let arr = item.split('='),                   name = decodeURIComponent(arr[0]),                   value = decodeURIComponent(arr[1]);                   name.length &amp;&amp; (args[name] = value)           })       return args;   }   复制代码</code></pre> <ul> <li> <p style="text-align:left;">解析url参数</p> </li> </ul> <pre class="has"><code class="language-go">/* 解析url参数 */   export const paramsToStringify = (params) =&gt; {       if(params){           let query = [];           for(let key in params){               query.push(`${key}=${params[key]}`)           }           return `${query.join('&amp;')}`       }else{           return ''       }   }   复制代码</code></pre> <ul> <li> <p style="text-align:left;">将数据转化为数组</p> </li> </ul> <pre class="has"><code class="language-go">export const toArray = (data) =&gt; {       return Array.isArray(data) ? data : [data]   }   复制代码</code></pre> <ul> <li> <p style="text-align:left;">带参数跳转url（hash模式）</p> </li> </ul> <pre class="has"><code class="language-go">/**    *  带参数跳转url（hash模式）    * @param {String} url    * @param {Object} params    */   export const toPage = (url, params) =&gt; {       if(params){           let query = [];           for(let key in params){               query.push(`${key}=${params[key]}`)           }           window.location.href = `./index.html#/${url}?${query.join('&amp;')}`;       }else{           window.location.href = `./index.html#/${url}`;       }   }   复制代码</code></pre> <ul> <li> <p style="text-align:left;">控制字符串显示，超出指定字数则显示省略号</p> </li> </ul> <pre class="has"><code class="language-go">/**    * 指定字符串 溢出显示省略号    * @param {String} str    * @param {Number} num    */   export const getSubStringSum = (str = "", num = 1) =&gt; {       let newStr;       if(str){           str = str + '';           if (str.trim().length &gt; num ) {               newStr = str.trim().substring(0, num) + "...";           } else {               newStr = str.trim();           }       }else{           newStr = ''       }       return newStr;   }   复制代码</code></pre> <ul> <li> <p style="text-align:left;">生成uuid</p> </li> </ul> <pre class="has"><code class="language-go">/**    * 生成uuid    * @param {number} len 生成指定长度的uuid    * @param {number} radix uuid进制数    */   export function uuid(len, radix) {       let chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');       let uuid = [], i;       radix = radix || chars.length;           if (len) {         for (i = 0; i &lt; len; i++) uuid[i] = chars[0 | Math.random()*radix];       } else {         let r;             uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';         uuid[14] = '4';             for (i = 0; i &lt; 36; i++) {           if (!uuid[i]) {             r = 0 | Math.random()*16;             uuid[i] = chars[(i == 19) ? (r &amp; 0x3) | 0x8 : r];           }         }       }           return uuid.join('');   }   复制代码</code></pre> <ul> <li> <p style="text-align:left;">生成指定格式的时间字符串</p> </li> </ul> <pre class="has"><code class="language-go">/**    * 生成指定格式的时间    * @param {*} timeStemp 时间戳    * @param {*} flag 格式符号    */   export function formatTime(timeStemp, flag) {       let time = new Date(timeStemp);       let timeArr = [time.getFullYear(), time.getMonth() + 1, time.getDate()];       return timeArr.join(flag || '/')   }   复制代码</code></pre> <span class="directory"></span><h4 id="title-8">1.11 如何基于axios二次封装一个具有请求/响应拦截的http请求</h4> <p>这个主要是对axios的理解，大家可以学习axios官方文档，这里给出一个二次封装的模版：</p> <pre class="has"><code class="language-go">import axios from 'axios'   import qs from 'qs'      // 请求拦截   axios.interceptors.request.use(config =&gt; {     // 此处可以封装一些加载状态     return config   }, error =&gt; {     return Promise.reject(error)   })      // 响应拦截   axios.interceptors.response.use(response =&gt; {     return response   }, error =&gt; {     return Promise.resolve(error.response)   })      function checkStatus (response) {     // 此处可以封装一些加载状态     // 如果http状态码正常，则直接返回数据     if(response) {       if (response.status === 200 || response.status === 304) {         return response.data         // 如果不需要除了data之外的数据，可以直接 return response.data       } else if (response.status === 401) {         location.href = '/login';       } else {         throw response.data       }     } else {       throw {data:'网络错误'}     }        }      // axios默认参数配置   axios.defaults.baseURL = '/api/v0';   axios.defaults.timeout = 10000;      // restful API封装   export default {     post (url, data) {       return axios({         method: 'post',         url,         data: qs.stringify(data),         headers: {           'X-Requested-With': 'XMLHttpRequest',           'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'         }       }).then(         (res) =&gt; {           return checkStatus(res)         }       )     },     get (url, params) {       return axios({         method: 'get',         url,         params, // get 请求时带的参数         headers: {           'X-Requested-With': 'XMLHttpRequest'         }       }).then(         (res) =&gt; {           return checkStatus(res)         }       )     },     del (url, params) {       return axios({         method: 'delete',         url,         params, // get 请求时带的参数         headers: {           'X-Requested-With': 'XMLHttpRequest'         }       }).then(         (res) =&gt; {           return checkStatus(res)         }       )     }   }   复制代码</code></pre> <p>该模版只是一个大致框架，大家可以细化成业务需求的样子，该案例提供了restful接口方法，比如get/post/delete/put等。</p> <span class="directory"></span><h4 id="title-9">1.12 vue常用社区组件，插件</h4> <p>笔者在做vue项目时为了提高开发效率也会直接用第三方插件，下面整理一下常用的vue社区组件和库。</p> <ol> <li> <p style="text-align:left;">UI框架</p> </li> </ol> <ul> <li> <p>elementUI</p> </li> <li> <p>iview</p> </li> <li> <p>Mint UI 基于 Vue.js 的移动端组件库</p> </li> <li> <p>Vant 有赞团队的移动端组件库</p> </li> </ul> <ol> <li> <p style="text-align:left;">社区组件</p> </li> </ol> <ul> <li> <p>Vuetable-2 基于vue的强大的表格组件</p> </li> <li> <p>vue-fa 基于vue的图标组件库</p> </li> <li> <p>vue-notification vue优美的信息通知组件</p> </li> <li> <p>vue-progress-path vue个性的路径进度条组件</p> </li> <li> <p>Vue树组件，可让您以美观和逻辑的方式呈现层次结构的数据</p> </li> <li> <p>vue-social-sharing vue社区分享组件</p> </li> <li> <p>vue-qrcode-reader 一组用于检测和解码二维码的Vue.js组件</p> </li> <li> <p>vue-clipboard2 基于vue的剪切板组件</p> </li> <li> <p>cool-emoji-picker vue表情包组件</p> </li> <li> <p>Vue-tabs-component 强大而美观的tab组件</p> </li> </ul> <p>更多组件可以在vue插件社区查看。</p> <h3>2. vue项目配置经验总结</h3> <p>在讲完vue项目经验之后，为了让大家能独立负责一个项目，我们还需要知道从0开始搭建项目的步骤，以及通过项目实际情况，自己配置一个符合的项目框架，比如有些公司会采用vue+element+vue+less搭建，有些公司采用vue+iview+vue+sass，或者其他更多的技术栈，所以我们要有把控能力，我们需要熟悉webpack或者vue-cli3脚手架的配置，笔者之前有些过详细的webpack和vue-cli3搭建自定义项目的文章，这里由于篇幅有限就不一一举例了。感兴趣的朋友可以参考以下两篇文章：</p> <ul> <li> <p><a href="" rel="nofollow">一张图教你快速玩转vue-cli3</a></p> </li> <li> <p><a href="" rel="nofollow">用 webpack 4.0 撸单页/多页脚手架 (jquery, react, vue, typescript)</a></p> </li> </ul> <h3>3. vue组件设计经验总结</h3> <blockquote><p>   ❝</p> <p>组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。几乎任意类型的应用界面都可以抽象为一个组件树。在一个大型应用中，有必要将整个应用程序划分为组件，以使开发更易管理。</p> <p>  ❞</p></blockquote> <p>对于一个基础组件来说，我们该如何下手去设计呢？首先笔者觉得应该先从需求和功能入手，先划分好组件的功能边界，组件能做什么，理清这些之后再开始写组件。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220608/eee038b74b8a1c0504064495a0fa4a68.jpg" alt="vue项目实战精粹汇总"></p> <p>如上图组件的一个抽象，我们无论如何记住的第一步就是先理清需求在去着手开发，这样可以避免大量效率的丢失。在上图中我们要注意组件的解耦合，每个组件都负责特定的功能或者展现，这样对组件后期维护性和扩展性有非常大的帮助。笔者总结了一下组件设计的注意事项：</p> <ul> <li> <p>确定组件设计的边界和功能定位</p> </li> <li> <p>组件尽量遵循单一职责原理，用组合代替功能的杂糅</p> </li> <li> <p>组件属性暴露要适度，不可过渡暴露属性</p> </li> <li> <p>组件封装要考虑可重用，可组合，可配置</p> </li> <li> <p>做好组件类型设计的划分（展示型组件，录入型组件，基础组件， 布局组件，反馈型组件，业务组件等）</p> </li> </ul> <p>笔者拿之前在开源社区发布的一个文件上传组件为例子来说明举例，代码如下：</p> <pre class="has"><code class="language-go">&lt;template&gt;       &lt;div&gt;           &lt;a-upload               :action="action"               listType="picture-card"               :fileList="fileList"               @preview="handlePreview"               @change="handleChange"               :remove="delFile"               :data="data"               &gt;               &lt;template v-if="!fileList.length &amp;&amp; defaultValue"&gt;                   &lt;img :src="defaultValue" alt="" style="width: 100%"&gt;               &lt;/template&gt;               &lt;template v-else&gt;                   &lt;div v-if="fileList.length &lt; 2"&gt;                       &lt;a-icon type="plus" /&gt;                       &lt;div class="ant-upload-text"&gt;上传&lt;/div&gt;                   &lt;/div&gt;               &lt;/template&gt;           &lt;/a-upload&gt;           &lt;a-modal :visible="previewVisible" :footer="null" @cancel="handleCancel"&gt;               &lt;img alt="example" style="width: 100%" :src="previewImage" /&gt;           &lt;/a-modal&gt;       &lt;/div&gt;      &lt;/template&gt;      &lt;script lang="ts"&gt;   import { Component, Vue, Prop } from 'vue-property-decorator';   @Component   export default class Upload extends Vue {     @Prop({ default: 'https://www.mocky.io/v2/5cc8019d300000980a055e76' })     action!: string;        @Prop()     defaultValue: string;        @Prop()     data: object;        @Prop({ default: function() {} })     onFileDel: any;        @Prop({ default: function() {} })     onFileChange: any;        public previewVisible: boolean =  false;     public previewImage: string =  '';     public fileList: object[] = [];        // 预览图片     public handlePreview(file: any) {       this.previewImage = file.url || file.thumbUrl;       this.previewVisible = true;     }          // 删除文件和回调     public delFile(file: any) {       this.fileList = [];       this.onFileDel();     }        // 文件上传变化的处理函数     public handleChange({ file }: any) {       this.fileList = <div class="down"><a class="d-popup" title="下载链接" href="#button_file"><i class="be be-download"></i>下载地址</a><div class="clear"></div></div>;       if(file.status === 'done') {         this.onFileChange(file.response.url);       } else if(file.status === 'error') {         this.$message.error(file.response.msg)       }     }     // 取消预览     public handleCancel() {         this.previewVisible = false;     }   }   &lt;/script&gt;   复制代码</code></pre> <p>以上文件上传预览采用的是ts来实现，但设计思路都是一致的，大家可以参考交流一下。 关于如何设计一个健壮的组件，笔者也写过相关文章，大致思想都好似一样的，可以参考一下：</p> <ul> <li> <p>《精通react/vue组件设计》之快速实现一个可定制的进度条组件</p> </li> <li> <p>《精通react/vue组件设计》之用纯css打造类materialUI的按钮点击动画并封装成react组件</p> </li> <li> <p>3分钟教你用原生js实现具有进度监听的文件上传预览组件</p> </li> </ul> <p>组件的设计思想和方法与具体框架无关，所以组件设计的核心是方法论，我们只有在项目中不断总结和抽象，才能对组件设计有更深刻的理解。</p> <h3>4. vue项目架构与服务化探索</h3> <p>这里是笔者总结的一套思维导图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220608/4c8d9d5730e37cf09c941642b8c41ec0.jpg" alt="vue项目实战精粹汇总"></p> <p>有点微前端架构的感觉，但是还有很多细节需要考虑。此架构适用于不同子系统独立部署和开发的环境， 也不需要考虑具体的技术栈选择，相同的框架采用同一套自建组件库来达到组件的复用，这里提倡项目开始设计时就考虑组件化和模块化，做出功能的最大的拆分和去耦合。笔者后面会单独花时间总结微前端架构具体的一些设计思路和落地方案，感兴趣的可以一起探讨交流。</p> </div> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-55917.htm">go web 处理文件上传</a></p>
                                        <p>下一个：<a href="/news/article-56462.htm">小型宠物食品加工厂需要多少资金呢 小型宠物食品加工厂需要多少资金呢英语</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-34714.htm" title="动物疫苗在常温下能放多久呢视频讲解（动物疫苗运输与储存规范）">动物疫苗在常温下能放多久呢视频讲解（动物疫苗运输与储存规范）</a></li>
                        <li class="py-2"><a href="/news/article-46035.htm" title="山东聊城宠物医院排名（聊城宠物公司）">山东聊城宠物医院排名（聊城宠物公司）</a></li>
                        <li class="py-2"><a href="/news/article-33759.htm" title="宠物粮食市场规模多大啊（宠物粮市场份额）">宠物粮食市场规模多大啊（宠物粮市场份额）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-31-clash-v2ray-ss-ssr.htm" title="「1月31日」最高速度18.4M/S，2025年Shadowrocket/SSR/V2ray/Clash每天更新免费节点订阅链接">「1月31日」最高速度18.4M/S，2025年Shadowrocket/SSR/V2ray/Clash每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-20220.htm" title="数组模拟队列进阶版本——环形队列（真正意义上的排队）">数组模拟队列进阶版本——环形队列（真正意义上的排队）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-24-free-subscribe-node.htm" title="「1月24日」最高速度21.8M/S，2025年Clash/V2ray/Shadowrocket/SSR每天更新免费节点订阅链接">「1月24日」最高速度21.8M/S，2025年Clash/V2ray/Shadowrocket/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-24-clash-v2ray-ss-ssr.htm" title="「11月24日」最高速度20.1M/S，2024年Clash/SSR/Shadowrocket/V2ray每天更新免费节点订阅链接">「11月24日」最高速度20.1M/S，2024年Clash/SSR/Shadowrocket/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-50524.htm" title="宠物领养平台论文摘要写什么内容好（宠物领养系统的开题报告）">宠物领养平台论文摘要写什么内容好（宠物领养系统的开题报告）</a></li>
                        <li class="py-2"><a href="/news/article-41555.htm" title="JS &#8211;引用数据类型">JS &#8211;引用数据类型</a></li>
                        <li class="py-2"><a href="/news/article-21137.htm" title="做狗粮的机器多少钱一台（狗粮加工厂投资多少钱）">做狗粮的机器多少钱一台（狗粮加工厂投资多少钱）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">48</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
                <footer class="site-footer">
            <div class="container">
                <div class="row text-center">
                    <div class="col-md-12">
                        <div class="border-top">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <p>
                                <a href="/">V2ray Node免费节点官网</a> 版权所有 Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
      <script src="/assets/website/js/frontend/v2ray_node/jquery-3.3.1.min.js"></script>
      <script src="/assets/website/js/frontend/v2ray_node/jquery-migrate-3.0.1.min.js"></script>
      <script src="/assets/website/js/frontend/v2ray_node/jquery-ui.js"></script>
      <script src="/assets/website/js/frontend/v2ray_node/popper.min.js"></script>
      <script src="/assets/website/js/frontend/v2ray_node/bootstrap.min.js"></script>
      <script src="/assets/website/js/frontend/v2ray_node/owl.carousel.min.js"></script>
      <script src="/assets/website/js/frontend/v2ray_node/jquery.stellar.min.js"></script>
      <script src="/assets/website/js/frontend/v2ray_node/jquery.easing.1.3.js"></script>
      <script src="/assets/website/js/frontend/v2ray_node/aos.js"></script>
      <script src="/assets/website/js/frontend/v2ray_node/jquery.fancybox.min.js"></script>
      <script src="/assets/website/js/frontend/v2ray_node/jquery.sticky.js"></script>
      <script src="/assets/website/js/frontend/v2ray_node/main.js"></script>
      <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
      <script src="/assets/website/js/frontend/G.js"></script>
    </div> <!-- .site-wrap -->
</body>

</html>